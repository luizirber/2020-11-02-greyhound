<html>
<head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8"/>
  <title>greyhound gather</title>
<link rel="stylesheet" href="app.css">
</head>

<body>
  <header>
    <h2>greyhound gather</h2>
  </header>

  <div class="columns">
    <div id="files" class="box" ondragover="event.preventDefault()">
      <div id="drag-container">
        <p>
          <b>Drag &amp; drop</b> a FASTA/Q file here.<br>
          Either gzip-compressed or uncompressed works too.
        </p>
      </div>

      <div id="progress-container">
        <div id="progress-bar"></div>
      </div>
      <div class="columns">
        <div class="box" id="download">
          <button id='download_btn' type="button" disabled>Download</button>
        </div>
      </div>

      <div id="results-container"></div>
    </div>

    <div id="info" class="box">
      <p>
        This is a demo for a system running <b>gather</b>,
        an algorithm for decomposing a query into reference datasets.<br>
      </p>

      <p><b>greyhound</b> is an optimized approach for running <b>gather</b>
      based on an Inverted Index containing a mapping of hashes to datasets containing them.
      In this demo the datasets are Scaled MinHash sketches (k=21, scaled=2000)
      calculated from the
      <a href="https://gtdb.ecogenomic.org/stats">31,910 species clusters in the GTDB r95</a>.

      <p>
      This demo server is hosted on a <a href="https://aws.amazon.com/ec2/instance-types/t3/">t3.2xlarge</a>
      spot instance on AWS,
      using ~10GB of the RAM for the inverted index + signature caching (for speed).
      The server is implemented using <a href="https://github.com/http-rs/tide">tide</a>,
      an async web framework written in <a href="https://rust-lang.org">Rust</a>.
      The frontend is implemented in JavaScript and <a href="https://webassembly.org/">WebAssembly</a>
      for calculating the Scaled MinHash sketch in your browser,
      instead of uploading the full data to the server.
      This uses the Rust implementation of sourmash compiled to WebAssembly using
      <a href="https://rustwasm.github.io/docs/wasm-bindgen/">wasm-bindgen</a> and packaged with
      <a href="https://rustwasm.github.io/wasm-pack/">wasm-pack</a>.
      </p>

      <p>
        For more info about the methods used in this demo, see:
        <ul>
          <li>gather: <a href="https://dib-lab.github.io/2020-paper-sourmash-gather/">Lightweight compositional analysis of metagenomes with sourmash gather</a>.</li>
          <li>sourmash: <a href="https://doi.org/10.12688/f1000research.19675.1">Large-scale sequence comparisons with sourmash</a>.</li>
          <li>sourmash in the browser: <a href="https://blog.luizirber.org/2018/08/27/sourmash-wasm/">Oxidizing sourmash: WebAssembly</a>.</li>
          <li>Rust and WebAssembly: <a href="https://rustwasm.github.io/docs/book/">The Rust and WebAssembly book</a>.</li>
        </ul>
      </p>

      <p>Additional thanks to the <a href="https://github.com/ipfs/js-ipfs/tree/master/examples/browser-exchange-files">
      Exchange files between the browser and other IPFS nodes</a> example from
      <a href="https://github.com/ipfs/js-ipfs">js-ipfs</a>,
      from where most of the UI/frontend was adapted.
      </p>
    </div>
  </div>
</body>

</html>
